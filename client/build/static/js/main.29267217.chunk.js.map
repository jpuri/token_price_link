{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","App","state","prices","componentDidMount","eth","net","getId","networkId","deployedNetwork","PriceConsumerContract","networks","instance","Contract","abi","address","methods","getLatestPrice","call","setState","alert","console","error","this","length","className","map","price","index","key","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6SAiBeA,EAfC,kBACd,IAAIC,SAAQ,SAACC,EAASC,GACpBC,OAAOC,iBAAiB,OAAxB,sBAAgC,4BAAAC,EAAA,0DAC1BF,OAAOG,SADmB,wBAEtBC,EAAO,IAAIC,IAAKL,OAAOG,UAFD,kBAIpBH,OAAOG,SAASG,SAJI,OAK1BR,EAAQM,GALkB,gDAO1BL,EAAO,EAAD,IAPoB,8DC0DrBQ,G,kNAvDbC,MAAQ,CACNC,OAAQ,I,EAGVC,kB,sBAAoB,oCAAAR,EAAA,+EAEGN,IAFH,cAEVQ,EAFU,gBAGQA,EAAKO,IAAIC,IAAIC,QAHrB,cAGVC,EAHU,OAIVC,EAAkBC,EAAsBC,SAASH,GACjDI,EAAW,IAAId,EAAKO,IAAIQ,SAC5BH,EAAsBI,IACtBL,GAAmBA,EAAgBM,SAPrB,UASKH,EAASI,QAAQC,iBAAiBC,OATvC,QASVf,EATU,OAWhB,EAAKgB,SAAS,CACZhB,WAZc,kDAehBiB,MAAM,0EAGNC,QAAQC,MAAR,MAlBgB,0D,4CAsBpB,WACE,IAAQnB,EAAWoB,KAAKrB,MAAhBC,OACR,OAAKA,EAAOqB,OAIV,yBAAKC,UAAU,OACb,mEACA,+BACE,+BACE,4BACE,oCACA,oCACA,sCAEDtB,EAAOuB,KAAI,SAACC,EAAOC,GAAR,OACV,wBAAIC,IAAKF,EAAM,IACb,4BAAKC,EAAQ,GACb,4BAAKD,EAAM,IACX,4BAAKA,EAAM,WAhBd,oD,GA9BKG,cCMEC,QACW,cAA7BrC,OAAOsC,SAASC,UAEe,UAA7BvC,OAAOsC,SAASC,UAEhBvC,OAAOsC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.29267217.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    window.addEventListener(\"load\", async () => {\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          await window.ethereum.enable();\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport PriceConsumerContract from \"./contracts/PriceConsumer.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    prices: [],\n  };\n\n  componentDidMount = async () => {\n    try {\n      const web3 = await getWeb3();\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = PriceConsumerContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        PriceConsumerContract.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n      const prices = await instance.methods.getLatestPrice().call();\n\n      this.setState({\n        prices,\n      });\n    } catch (error) {\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n      console.error(error);\n    }\n  };\n\n  render() {\n    const { prices } = this.state;\n    if (!prices.length) {\n      return <div>Loading data...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Coin prices from chain link network</h1>\n        <table>\n          <thead>\n            <tr>\n              <th>S.No</th>\n              <th>Coin</th>\n              <th>Price</th>\n            </tr>\n            {prices.map((price, index) => (\n              <tr key={price[0]}>\n                <td>{index + 1}</td>\n                <td>{price[0]}</td>\n                <td>{price[1]}</td>\n              </tr>\n            ))}\n          </thead>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}